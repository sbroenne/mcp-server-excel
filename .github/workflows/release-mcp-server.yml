name: Release MCP Server

# This workflow uses NuGet Trusted Publishing via OIDC (OpenID Connect)
# The NuGet/login action exchanges GitHub OIDC tokens for short-lived NuGet API keys
# See: docs/NUGET_TRUSTED_PUBLISHING.md for setup instructions
#
# Required GitHub Secret:
# - NUGET_USER: Your NuGet.org username (profile name, NOT email)
#
# Required NuGet.org Configuration:
# - Package: Sbroenne.ExcelMcp.McpServer
# - Trusted Publisher: GitHub Actions
# - Owner: sbroenne
# - Repository: mcp-server-excel
# - Workflow: release-mcp-server.yml

on:
  push:
    tags:
      - 'mcp-v*'

jobs:
  release-mcp-server:
    runs-on: windows-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      id-token: write  # Required for NuGet Trusted Publishing via OIDC

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Update MCP Server Version
      run: |
        $tagName = "${{ github.ref_name }}"
        $version = $tagName -replace '^mcp-v', ''

        Write-Output "Updating MCP Server to version $version"

        # Update MCP Server project version
        $mcpCsprojPath = "src/ExcelMcp.McpServer/ExcelMcp.McpServer.csproj"
        $mcpContent = Get-Content $mcpCsprojPath -Raw
        $mcpContent = $mcpContent -replace '<Version>[\d\.]+</Version>', "<Version>$version</Version>"
        $mcpContent = $mcpContent -replace '<AssemblyVersion>[\d\.]+\.[\d\.]+</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $mcpContent = $mcpContent -replace '<FileVersion>[\d\.]+\.[\d\.]+</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        Set-Content $mcpCsprojPath $mcpContent

        # Update MCP Server configuration
        $serverJsonPath = "src/ExcelMcp.McpServer/.mcp/server.json"
        $serverContent = Get-Content $serverJsonPath -Raw

        # Update main version field (near top of file, not in _meta section)
        $serverContent = $serverContent -replace '(\s*"version":\s*)"[\d\.]+"(\s*,\s*\n\s*"title")' , "`$1`"$version`"`$2"

        # Update package version in packages array (specifically after identifier field)
        $serverContent = $serverContent -replace '("identifier":\s*"Sbroenne\.ExcelMcp\.McpServer",\s*\n\s*"version":\s*)"[\d\.]+"', "`$1`"$version`""

        Set-Content $serverJsonPath $serverContent

        Write-Output "Updated MCP Server project version to $version"
        Write-Output "Updated MCP Server configuration version to $version"

        # Set environment variable for later steps
        echo "PACKAGE_VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore src/ExcelMcp.McpServer/ExcelMcp.McpServer.csproj

    - name: Build MCP Server
      run: dotnet build src/ExcelMcp.McpServer/ExcelMcp.McpServer.csproj --configuration Release --no-restore

    - name: Skip MCP Server Tests (requires Excel)
      run: |
        Write-Output "‚ÑπÔ∏è Note: MCP Server tests skipped in CI - they require Microsoft Excel"
        Write-Output "   All MCP Server tests are Integration tests that need Excel COM interop"
        Write-Output "   Run 'dotnet test tests/ExcelMcp.McpServer.Tests/' locally with Excel installed"
      shell: pwsh

    - name: Pack NuGet Package
      run: dotnet pack src/ExcelMcp.McpServer/ExcelMcp.McpServer.csproj --configuration Release --no-build --output ./nupkg

    - name: NuGet login (OIDC ‚Üí temp API key)
      uses: NuGet/login@v1
      id: nuget-login
      with:
        user: ${{ secrets.NUGET_USER }}  # Your nuget.org username (profile name), NOT email

    - name: Publish to NuGet.org (Trusted Publishing)
      run: |
        $version = $env:PACKAGE_VERSION
        $packagePath = "nupkg/Sbroenne.ExcelMcp.McpServer.$version.nupkg"

        Write-Output "Publishing $packagePath to NuGet.org using Trusted Publishing (OIDC)..."

        dotnet nuget push $packagePath `
          --api-key ${{ steps.nuget-login.outputs.NUGET_API_KEY }} `
          --source https://api.nuget.org/v3/index.json `
          --skip-duplicate

        Write-Output "üöÄ Published Sbroenne.ExcelMcp.McpServer.$version to NuGet.org"
        Write-Output "üîó Package will be available at: https://www.nuget.org/packages/Sbroenne.ExcelMcp.McpServer/$version"
      shell: pwsh

    - name: Install MCP Publisher
      run: |
        Write-Output "Installing MCP Publisher CLI..."
        $arch = if ([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture -eq "Arm64") { "arm64" } else { "amd64" }
        Invoke-WebRequest -Uri "https://github.com/modelcontextprotocol/registry/releases/latest/download/mcp-publisher_windows_$arch.tar.gz" -OutFile "mcp-publisher.tar.gz"
        tar xf mcp-publisher.tar.gz mcp-publisher.exe
        Remove-Item mcp-publisher.tar.gz
        Write-Output "‚úì MCP Publisher installed"
      shell: pwsh

    - name: Login to MCP Registry
      run: |
        Write-Output "Authenticating with MCP Registry using GitHub OIDC..."
        ./mcp-publisher.exe login github-oidc
        Write-Output "‚úì Authenticated with MCP Registry"
      shell: pwsh

    - name: Publish to MCP Registry
      run: |
        $version = $env:PACKAGE_VERSION
        Write-Output "Publishing to MCP Registry..."
        Write-Output "Server name: io.github.sbroenne/mcp-server-excel"
        Write-Output "Version: $version"
        
        # Navigate to MCP Server directory (where server.json is located)
        Set-Location src/ExcelMcp.McpServer
        
        # Publish to registry
        ../../mcp-publisher.exe publish
        
        Write-Output "üöÄ Published to MCP Registry"
        Write-Output "üîó Server available at: https://registry.modelcontextprotocol.io/servers/io.github.sbroenne/mcp-server-excel"
      shell: pwsh
      env:
        PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

    - name: Create MCP Server Release Package
      run: |
        $version = $env:PACKAGE_VERSION

        # Create release directory structure
        New-Item -ItemType Directory -Path "release" -Force
        New-Item -ItemType Directory -Path "release/ExcelMcp-MCP-Server-$version" -Force

        # Copy MCP Server files
        Copy-Item "src/ExcelMcp.McpServer/bin/Release/net8.0/*" "release/ExcelMcp-MCP-Server-$version/" -Recurse

        # Copy documentation
        Copy-Item "README.md" "release/ExcelMcp-MCP-Server-$version/"
        Copy-Item "LICENSE" "release/ExcelMcp-MCP-Server-$version/"
        Copy-Item "src/ExcelMcp.McpServer/README.md" "release/ExcelMcp-MCP-Server-$version/MCP-SERVER-README.md"

        # Create installation README with proper content
        $readmeContent = "# ExcelMcp MCP Server v$version`n`n"
        $readmeContent += "## Quick Start`n`n"
        $readmeContent += "### Option 1: Install as .NET Tool (Recommended)`n"
        $readmeContent += "``````powershell`n"
        $readmeContent += "# Install globally`n"
        $readmeContent += "dotnet tool install --global Sbroenne.ExcelMcp.McpServer --version $version`n`n"
        $readmeContent += "# Run MCP server`n"
        $readmeContent += "mcp-excel`n`n"
        $readmeContent += "# Update`n"
        $readmeContent += "dotnet tool update --global Sbroenne.ExcelMcp.McpServer`n"
        $readmeContent += "``````n`n"
        $readmeContent += "### Option 2: Run from Binary`n"
        $readmeContent += "``````powershell`n"
        $readmeContent += "dotnet ExcelMcp.McpServer.dll`n"
        $readmeContent += "``````n`n"
        $readmeContent += "## Features`n`n"
        $readmeContent += "- AI Assistant Integration - Native MCP protocol support`n"
        $readmeContent += "- Conversational Interface - Natural language Excel operations`n"
        $readmeContent += "- 6 Resource-Based Tools - Structured API for AI assistants`n"
        $readmeContent += "- Excel Development Focus - Power Query, VBA, worksheets`n`n"
        $readmeContent += "## Requirements`n`n"
        $readmeContent += "- Windows OS with Microsoft Excel installed`n"
        $readmeContent += "- .NET 8.0 runtime`n"
        $readmeContent += "- Excel 2016+ (for COM interop)`n`n"
        $readmeContent += "## License`n`n"
        $readmeContent += "MIT License - see LICENSE file for details.`n"

        Set-Content "release/ExcelMcp-MCP-Server-$version/README.md" $readmeContent

        # Create ZIP
        Compress-Archive -Path "release/ExcelMcp-MCP-Server-$version/*" -DestinationPath "ExcelMcp-MCP-Server-$version-windows.zip"

        Write-Output "Created ExcelMcp-MCP-Server-$version-windows.zip"
      shell: pwsh

    - name: Create GitHub Release
      run: |
        $tagName = "${{ github.ref_name }}"
        $version = $env:PACKAGE_VERSION

        # Create release notes
        $releaseNotes = "## ExcelMcp MCP Server $tagName`n`n"
        $releaseNotes += "### MCP Server for AI-Powered Excel Development`n`n"
        $releaseNotes += "The Model Context Protocol (MCP) Server enables AI assistants like GitHub Copilot, Claude, and ChatGPT to perform Excel development tasks through conversational interfaces.`n`n"
        $releaseNotes += "### Key Features`n"
        $releaseNotes += "- Native AI Integration - Built for GitHub Copilot and AI assistants`n"
        $releaseNotes += "- Conversational Excel - Natural language Excel operations`n"
        $releaseNotes += "- Resource-Based API - 6 structured tools instead of 40+ commands`n"
        $releaseNotes += "- Development Focus - Power Query refactoring, VBA enhancement, code review`n"
        $releaseNotes += "- Smart Context - AI understands Excel development workflows`n`n"
        $releaseNotes += "### Installation`n`n"
        $releaseNotes += "**Option 1: .NET Tool (Recommended)**`n"
        $releaseNotes += "``````powershell`n"
        $releaseNotes += "dotnet tool install --global Sbroenne.ExcelMcp.McpServer --version $version`n"
        $releaseNotes += "mcp-excel`n"
        $releaseNotes += "``````n`n"
        $releaseNotes += "**Option 2: Download Binary**`n"
        $releaseNotes += "1. Download ExcelMcp-MCP-Server-$version-windows.zip`n"
        $releaseNotes += "2. Extract and run: dotnet ExcelMcp.McpServer.dll`n`n"
        $releaseNotes += "### MCP Tools Available`n"
        $releaseNotes += "- excel_file - File management (create, validate, check-exists)`n"
        $releaseNotes += "- excel_powerquery - Power Query operations (list, view, import, export, update, refresh, delete)`n"
        $releaseNotes += "- excel_worksheet - Worksheet operations (list, read, write, create, rename, copy, delete, clear, append)`n"
        $releaseNotes += "- excel_parameter - Named range management (list, get, set, create, delete)`n"
        $releaseNotes += "- excel_cell - Cell operations (get-value, set-value, get-formula, set-formula)`n"
        $releaseNotes += "- excel_vba - VBA script management (list, export, import, update, run, delete)`n`n"
        $releaseNotes += "### Requirements`n"
        $releaseNotes += "- Windows OS with Microsoft Excel installed`n"
        $releaseNotes += "- .NET 8.0 runtime`n"
        $releaseNotes += "- Excel 2016+ (for COM interop)`n`n"
        $releaseNotes += "### Documentation`n"
        $releaseNotes += "- Configuration Guide: See README.md in package`n"
        $releaseNotes += "- GitHub Repository: https://github.com/sbroenne/mcp-server-excel`n"
        $releaseNotes += "- MCP Server Details: src/ExcelMcp.McpServer/README.md`n"

        # Create the release
        gh release create "$tagName" "ExcelMcp-MCP-Server-$version-windows.zip" --title "ExcelMcp MCP Server $tagName" --notes $releaseNotes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
      shell: pwsh
