name: Release Core

on:
  push:
    tags:
      - 'core-v*'

jobs:
  release-core:
    runs-on: windows-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Update Core Version
      run: |
        $tagName = "${{ github.ref_name }}"
        $version = $tagName -replace '^core-v', ''

        Write-Output "Updating Core libraries to version $version"

        # Update ComInterop project version
        $comInteropCsprojPath = "src/ExcelMcp.ComInterop/ExcelMcp.ComInterop.csproj"
        $comInteropContent = Get-Content $comInteropCsprojPath -Raw
        $comInteropContent = $comInteropContent -replace '<Version>[\d\.]+</Version>', "<Version>$version</Version>"
        $comInteropContent = $comInteropContent -replace '<AssemblyVersion>[\d\.]+\.[\d\.]+</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $comInteropContent = $comInteropContent -replace '<FileVersion>[\d\.]+\.[\d\.]+</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        Set-Content $comInteropCsprojPath $comInteropContent

        # Update Core project version
        $coreCsprojPath = "src/ExcelMcp.Core/ExcelMcp.Core.csproj"
        $coreContent = Get-Content $coreCsprojPath -Raw
        $coreContent = $coreContent -replace '<Version>[\d\.]+</Version>', "<Version>$version</Version>"
        $coreContent = $coreContent -replace '<AssemblyVersion>[\d\.]+\.[\d\.]+</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $coreContent = $coreContent -replace '<FileVersion>[\d\.]+\.[\d\.]+</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        Set-Content $coreCsprojPath $coreContent

        Write-Output "Updated Core libraries to version $version"

        # Set environment variable for later steps
        echo "PACKAGE_VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Restore dependencies
      run: |
        dotnet restore src/ExcelMcp.ComInterop/ExcelMcp.ComInterop.csproj
        dotnet restore src/ExcelMcp.Core/ExcelMcp.Core.csproj

    - name: Build ComInterop
      run: dotnet build src/ExcelMcp.ComInterop/ExcelMcp.ComInterop.csproj --configuration Release --no-restore

    - name: Build Core
      run: dotnet build src/ExcelMcp.Core/ExcelMcp.Core.csproj --configuration Release --no-restore

    - name: Run Core Tests (Unit only - no Excel or OnDemand tests)
      run: |
        dotnet test tests/ExcelMcp.ComInterop.Tests --filter "Category=Unit&RunType!=OnDemand" --configuration Release --no-build
        dotnet test tests/ExcelMcp.Core.Tests --filter "Category=Unit&RunType!=OnDemand" --configuration Release --no-build

    - name: Pack NuGet packages
      run: |
        dotnet pack src/ExcelMcp.ComInterop/ExcelMcp.ComInterop.csproj --configuration Release --no-build --output ./nupkg
        dotnet pack src/ExcelMcp.Core/ExcelMcp.Core.csproj --configuration Release --no-build --output ./nupkg

    - name: Create Core Release Package
      run: |
        $version = $env:PACKAGE_VERSION

        # Create release directory structure
        New-Item -ItemType Directory -Path "release" -Force
        New-Item -ItemType Directory -Path "release/ExcelMcp-Core-$version" -Force

        # Copy ComInterop library
        Copy-Item "src/ExcelMcp.ComInterop/bin/Release/net8.0/Sbroenne.ExcelMcp.ComInterop.dll" "release/ExcelMcp-Core-$version/"
        Copy-Item "src/ExcelMcp.ComInterop/bin/Release/net8.0/Sbroenne.ExcelMcp.ComInterop.pdb" "release/ExcelMcp-Core-$version/" -ErrorAction SilentlyContinue

        # Copy Core library
        Copy-Item "src/ExcelMcp.Core/bin/Release/net8.0/Sbroenne.ExcelMcp.Core.dll" "release/ExcelMcp-Core-$version/"
        Copy-Item "src/ExcelMcp.Core/bin/Release/net8.0/Sbroenne.ExcelMcp.Core.pdb" "release/ExcelMcp-Core-$version/" -ErrorAction SilentlyContinue

        # Copy dependencies
        Copy-Item "src/ExcelMcp.Core/bin/Release/net8.0/*.dll" "release/ExcelMcp-Core-$version/" -Exclude "Sbroenne.ExcelMcp.Core.dll", "Sbroenne.ExcelMcp.ComInterop.dll"

        # Copy documentation
        Copy-Item "README.md" "release/ExcelMcp-Core-$version/"
        Copy-Item "LICENSE" "release/ExcelMcp-Core-$version/"
        Copy-Item "docs/COMMANDS.md" "release/ExcelMcp-Core-$version/"

        # Create NuGet package info
        $nugetInfoContent = "# ExcelMcp Core Libraries v$version`n`n"
        $nugetInfoContent += "## NuGet Packages`n`n"
        $nugetInfoContent += "Install the packages from NuGet:`n`n"
        $nugetInfoContent += "``````powershell`n"
        $nugetInfoContent += "# COM Interop layer (Excel automation patterns)`n"
        $nugetInfoContent += "dotnet add package Sbroenne.ExcelMcp.ComInterop --version $version`n`n"
        $nugetInfoContent += "# Core business logic (Power Query, VBA, Worksheets, etc.)`n"
        $nugetInfoContent += "dotnet add package Sbroenne.ExcelMcp.Core --version $version`n"
        $nugetInfoContent += "``````n`n"
        $nugetInfoContent += "## Library Structure`n`n"
        $nugetInfoContent += "- **ExcelMcp.ComInterop** - Reusable COM automation patterns`n"
        $nugetInfoContent += "  - STA threading`n"
        $nugetInfoContent += "  - Session management`n"
        $nugetInfoContent += "  - Batch operations`n"
        $nugetInfoContent += "  - OLE message filter`n`n"
        $nugetInfoContent += "- **ExcelMcp.Core** - Excel-specific business logic`n"
        $nugetInfoContent += "  - Power Query operations`n"
        $nugetInfoContent += "  - VBA management`n"
        $nugetInfoContent += "  - Worksheet operations`n"
        $nugetInfoContent += "  - Named range parameters`n"
        $nugetInfoContent += "  - Cell operations`n"
        $nugetInfoContent += "  - Connection management`n"
        $nugetInfoContent += "  - Data Model operations`n`n"
        $nugetInfoContent += "## Quick Start`n`n"
        $nugetInfoContent += "``````csharp`n"
        $nugetInfoContent += "using Sbroenne.ExcelMcp.ComInterop.Session;`n"
        $nugetInfoContent += "using Sbroenne.ExcelMcp.Core.Commands;`n`n"
        $nugetInfoContent += "// Create commands`n"
        $nugetInfoContent += "var fileCommands = new FileCommands();`n"
        $nugetInfoContent += "var pqCommands = new PowerQueryCommands();`n`n"
        $nugetInfoContent += "// Use batch API`n"
        $nugetInfoContent += "await using var batch = await ExcelSession.BeginBatchAsync(`"workbook.xlsx`");`n"
        $nugetInfoContent += "var queries = await pqCommands.ListAsync(batch);`n"
        $nugetInfoContent += "await batch.SaveAsync();`n"
        $nugetInfoContent += "``````n`n"
        $nugetInfoContent += "## Documentation`n`n"
        $nugetInfoContent += "- **README.md** - Complete documentation`n"
        $nugetInfoContent += "- **COMMANDS.md** - Command reference`n"
        $nugetInfoContent += "- **GitHub**: https://github.com/sbroenne/mcp-server-excel`n`n"
        $nugetInfoContent += "## System Requirements`n`n"
        $nugetInfoContent += "- Windows OS (COM interop requirement)`n"
        $nugetInfoContent += "- .NET 8.0 Runtime`n"
        $nugetInfoContent += "- Microsoft Excel (2016 or later)`n"
        Set-Content "release/ExcelMcp-Core-$version/NUGET.md" $nugetInfoContent

        # Copy NuGet packages to release folder
        Copy-Item "nupkg/*.nupkg" "release/ExcelMcp-Core-$version/"

        # Create ZIP archive
        Compress-Archive -Path "release/ExcelMcp-Core-$version/*" -DestinationPath "release/ExcelMcp-Core-$version-libraries.zip"

        Write-Output "📦 Created release package: ExcelMcp-Core-$version-libraries.zip"
      shell: pwsh

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Core Libraries v${{ env.PACKAGE_VERSION }}
        body: |
          # ExcelMcp Core Libraries v${{ env.PACKAGE_VERSION }}

          Reusable .NET libraries for Excel automation via COM interop.

          ## 📦 NuGet Packages

          Install from NuGet.org:

          ```powershell
          # COM Interop layer (Excel automation patterns)
          dotnet add package Sbroenne.ExcelMcp.ComInterop --version ${{ env.PACKAGE_VERSION }}

          # Core business logic (Power Query, VBA, Worksheets, etc.)
          dotnet add package Sbroenne.ExcelMcp.Core --version ${{ env.PACKAGE_VERSION }}
          ```

          ## 📚 What's Included

          ### ExcelMcp.ComInterop
          - ✅ STA threading patterns
          - ✅ Excel session management
          - ✅ Batch operations API
          - ✅ OLE message filter for Excel busy states
          - ✅ Proper COM cleanup (no process leaks)

          ### ExcelMcp.Core
          - ✅ Power Query M code operations
          - ✅ VBA macro management
          - ✅ Worksheet CRUD operations
          - ✅ Named range parameters
          - ✅ Cell-level operations
          - ✅ Connection management (OLEDB, ODBC, Text, Web, etc.)
          - ✅ Data Model operations

          ## 🚀 Quick Start

          ```csharp
          using Sbroenne.ExcelMcp.ComInterop.Session;
          using Sbroenne.ExcelMcp.Core.Commands;

          var pqCommands = new PowerQueryCommands();

          await using var batch = await ExcelSession.BeginBatchAsync("workbook.xlsx");
          var queries = await pqCommands.ListAsync(batch);
          await batch.SaveAsync();
          ```

          ## 📋 System Requirements

          - **Windows OS** - Required for Excel COM interop
          - **.NET 8.0 Runtime** - Install via `winget install Microsoft.DotNet.Runtime.8`
          - **Microsoft Excel** - 2016 or later

          ## 📖 Documentation

          - [Complete Documentation](https://github.com/sbroenne/mcp-server-excel)
          - [Command Reference](https://github.com/sbroenne/mcp-server-excel/blob/main/docs/COMMANDS.md)
          - [Architecture Guide](https://github.com/sbroenne/mcp-server-excel/blob/main/docs/ARCHITECTURE-REFACTORING.md)

          ## 🔄 Changelog

          See [CHANGELOG.md](https://github.com/sbroenne/mcp-server-excel/blob/main/CHANGELOG.md) for details.

          ---

          **Full Changelog**: https://github.com/sbroenne/mcp-server-excel/compare/core-v${{ env.PACKAGE_VERSION }}...core-v${{ env.PACKAGE_VERSION }}
        files: |
          release/ExcelMcp-Core-${{ env.PACKAGE_VERSION }}-libraries.zip
          nupkg/*.nupkg
        draft: false
        prerelease: false

    - name: Publish to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if ($env:NUGET_API_KEY) {
          Write-Output "Publishing NuGet packages..."
          dotnet nuget push "nupkg/*.nupkg" --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
          Write-Output "✅ Published to NuGet.org"
        } else {
          Write-Output "⚠️ NUGET_API_KEY not set - skipping NuGet publish"
        }
      shell: pwsh
